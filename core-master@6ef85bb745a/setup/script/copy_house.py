#!/usr/bin/python

# local imports

# python modules
import MySQLdb
import string
import time

DB_HOST = "localhost"
DB_USER = "root"
DB_PASS = ""
DB_NAME = ""
# number of queries per interval
MAX_QUERY_TICK = 10000000000
# how long in seconds we sleep for
TICK_SLEEP = 1

FROM_SERVER_KEY = "GTM1"
TO_SERVER_KEY = "GTM2"

QUERY_GET_HOUSES = ''' SELECT id, house_num, premium, currency, price FROM gtm_house WHERE server_key = %s; '''
QUERY_GET_HOUSE_DATA = ''' SELECT hotspot_id, hotspot_type, data FROM gtm_house_data WHERE house_id = %s; '''
QUERY_CREATE_HOUSE = ''' INSERT INTO gtm_house (house_num, server_key, premium, currency, price) VALUES (%s, %s, %s, %s, %s);'''
QUERY_CREATE_HOUSE_DATA = ''' INSERT INTO gtm_house_data (house_id, hotspot_type, data) VALUES (%s, %s, %s);'''

# open MySQL connection
db = MySQLdb.connect(host=DB_HOST, user=DB_USER, passwd=DB_PASS, db=DB_NAME)
# grab cursor
cur = db.cursor()

# print out variables
print("MAX_QUERY_TICK = " + str(MAX_QUERY_TICK))
print("TICK_SLEEP = " + str(TICK_SLEEP))
print("FROM_SERVER_KEY = " + str(FROM_SERVER_KEY))
print("TO_SERVER_KEY = " + str(TO_SERVER_KEY))
print("QUERY_GET_HOUSES = " + str(QUERY_GET_HOUSES))
print("QUERY_GET_HOUSE_DATA = " + str(QUERY_GET_HOUSE_DATA))
print("QUERY_CREATE_HOUSE = " + str(QUERY_CREATE_HOUSE))
print("QUERY_CREATE_HOUSE_DATA = " + str(QUERY_CREATE_HOUSE_DATA))

def get_houses(server_key):
	'''
	Get all the houses with the specified server key.

	Args:
		server_key: The server key to get the houses for, i.e. "GTM1"

	Returns:
		A list of tuples for the houses on the server key in the form
		of (house_id, house_num, premium, currency, price).
	'''
	data = (str(server_key))
	cur.execute(QUERY_GET_HOUSES, data)

	houses = []
	for tup in cur:
		house_id = int(tup[0])
		house_num = int(tup[1])
		premium = bool(tup[2])
		currency = str(tup[3])
		price = int(tup[4])

		houses.append((house_id, house_num, premium, currency, price))

	return houses

def get_house_data(house_id):
	'''
	Get all the data regarding the house.

	Args:
		house_id: The id of the house

	Returns:
		A list of tuples for the house data in the form of (hotspot_id, hotspot_type, data).
	'''
	data = (int(house_id))
	cur.execute(QUERY_GET_HOUSE_DATA, data)

	house_data = []
	for tup in cur:
		hotspot_id = int(tup[0])
		hotspot_type = str(tup[1])
		data = str(tup[2])

		house_data.append((hotspot_id, hotspot_type, data))

	return house_data

def create_house_entry(house_num, server_key, premium, currency, price):
	'''
	Creates an entry in the 'gtm_house' table.

	Args:
		house_num: The number of the house
		server_key: The server key that this house is on
		premium: Whether or not this is a premium house
		currency: The currency involved for the purchase of this house
		price: The amount of the currency involved for the purchase of this house 

	Returns:
		The generated house_id that is unique, if one was made.
	'''
	data = (int(house_num), str(server_key), bool(premium), str(currency), int(price))
	cur.execute(QUERY_CREATE_HOUSE, data)

	# return the generated key
	return cur.lastrowid

def create_house_data_entry(house_id, hotspot_type, data):
	'''
	Creates an entry in the 'gtm_house_data' table.

	Args:
		house_id: The unique id of the house, generated by the database
		hotspot_type: The type of the hotspot
		data: The data associated with the hotspot
	'''
	data = (int(house_id), str(hotspot_type), str(data))
	cur.execute(QUERY_CREATE_HOUSE_DATA, data)

#########
# BELOW IS THE ACTUAL SCRIPT LOGIC
#########

print('Running script...')
start_time = time.time()

# limit the amount of queries to the database per interval
tick = 0

houses = get_houses(server_key=FROM_SERVER_KEY)
houses_created = 0
house_data_found = 0
house_data_created = 0
for house_id, house_num, premium, currency, price in houses:
	tick += 1

	# create new house in new server
	generated_house_id = create_house_entry(house_num=house_num, server_key=TO_SERVER_KEY, premium=premium, currency=currency, price=price)
	if generated_house_id is not None and generated_house_id > 0:
		houses_created += 1

		# get house data from original house id
		house_data = get_house_data(house_id=house_id)
		if house_data is not None and len(house_data) > 0:

			house_data_found += len(house_data)

			for hotspot_id, hotspot_type, data in house_data:
				create_house_data_entry(house_id=generated_house_id, hotspot_type=hotspot_type, data=data)
				house_data_created += 1

	if tick > MAX_QUERY_TICK:
		tick = 0
		time.sleep(TICK_SLEEP)
		break

# commit query
db.commit()
cur.close()

run_time = time.time() - start_time	
print('Script is now complete! (' + str(run_time) + ' secs)')
print('Number of houses found: ' + str(len(houses)))
print('Number of houses created: ' + str(houses_created))
print('Number of house data found: ' + str(house_data_found))
print('Number of house data created: ' + str(house_data_created))

# close the connection
db.close()